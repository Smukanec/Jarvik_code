# Jarvik – Manuál k instalaci a použití

Tento krátký manuál popisuje základní kroky pro instalaci a spuštění Jarvika na lokálním stroji.

Ve výchozím nastavení používají skripty model `gemma:2b`. Pokud chcete používat jiný model, nastavte proměnnou `MODEL_NAME` při jejich spouštění.
Flask API naslouchá na portu `8010`, který lze změnit proměnnou `FLASK_PORT`.

## Instalace

1. Spusťte instalační skript, který vytvoří virtuální prostředí a nainstaluje závislosti:
   ```bash
   bash install_jarvik.sh
   ```
   Pro čistou instalaci můžete použít přepínač `--clean`, který nejprve odstraní případné starší soubory:
   ```bash
   bash install_jarvik.sh --clean
   ```

2. Po dokončení instalace načtěte aliasy usnadňující práci se skripty:
   ```bash
   bash load.sh
   ```
    Do souboru `~/.bashrc` se přidají příkazy jako `jarvik-start`, `jarvik-status`,
    `jarvik-model`, `jarvik-flask`, `jarvik-ollama` a `jarvik-start-7b`.

## Spuštění

Jarvika spustíte buď přímo pomocí skriptu `start_jarvik.sh`, nebo přes alias `jarvik-start` (pokud jste provedli krok s načtením aliasů):
```bash
bash start_Gemma_2B.sh
# nebo
jarvik-start
```
Skript aktivuje virtuální prostředí, spustí Ollamu, zvolený model (výchozí
Gemma 2B) a nakonec Flask server na portu 8010 (lze změnit proměnnou
`FLASK_PORT`). Pokud model chybí, stáhne se automaticky. Pro jiný model
nastavte proměnnou `MODEL_NAME` při spuštění – všechny dodané skripty ji nyní
plně respektují. Například:
Z webového rozhraní lze model přepnout rozbalovacím seznamem nahoře. Po
výběru se zavolá nová cesta `/model`, která Jarvika restartuje s vybraným
modelem.

```bash
MODEL_NAME="mistral:7b-Q4_K_M" bash start_jarvik.sh
```
nebo použijte připravený skript pro Mistral 7B:

```bash
bash start_Mistral_7B.sh
# nebo
jarvik-start-7b
# (k dispozici po spuštění `bash load.sh`)
```
Stejnou hodnotu používá i samotná Flask aplikace.

Kdykoli později můžete model změnit příkazem:

```bash
bash switch_model.sh <model>
```

Skript ukončí běžící služby a znovu spustí Jarvika s novým modelem.

### Offline použití

Pokud nemáte k dispozici internetové připojení, stáhněte si nejprve soubor s
modelem, například skriptem `stahni-mistral-q4.sh`. Vytvořte `Modelfile` s řádkem
`FROM /cesta/k/mistral.q4_K_M.gguf` a zaregistrujte model příkazem:

```bash
ollama create mistral:7b-Q4_K_M -f Modelfile
```

Nastavíte-li proměnnou `LOCAL_MODEL_FILE` na cestu k tomuto souboru, startovací
skripty registraci provedou automaticky.

### Spuštění pouze Ollamy

Pokud potřebujete spustit jen službu Ollama bez načtení modelu, použijte:

```bash
bash start_ollama.sh
```

Po načtení aliasů stačí příkaz:

```bash
jarvik-ollama
```

### Spuštění pouze modelu

Pokud potřebujete jen běžící model bez Flasku, spusťte:

```bash
bash start_model.sh
```

Po načtení aliasů stačí příkaz:

```bash
jarvik-model
```

### Spuštění pouze Flasku

Pokud už máte spuštěný model a potřebujete jen Flask server, spusťte nový
skript nebo příkaz ručně:

```bash
bash start_flask.sh
# nebo ručně
source venv/bin/activate && python main.py
```

Po načtení aliasů stačí příkaz:

```bash
jarvik-flask
```

## Stav běžících služeb

Aktuální stav zjistíte skriptem `status.sh` nebo aliasem `jarvik-status`:
```bash
bash status.sh
# nebo
jarvik-status
```
Zobrazí se informace o běžících procesech a dostupnosti znalostních souborů.

Pro kontrolu více modelů najednou je lze uvést jako argumenty nebo nastavit
proměnnou `MODEL_NAMES`:

```bash
MODEL_NAMES="mistral jarvik-q4" bash status.sh
```

## Ukončení a odinstalování

Pro zastavení všech služeb a odstranění prostředí použijte:
```bash
bash uninstall_jarvik.sh
```
Skript ukončí Ollamu, spuštěný model i Flask, smaže adresáře `venv/` a `memory/` a vyčistí aliasy z `~/.bashrc`.

## Rychlý start

Pro jednorázové spuštění všech komponent slouží skript `start_jarvik.sh`, který aktivuje prostředí, spustí model i server v jednom kroku:
```bash
bash start_jarvik.sh
```

## Upgrade

Nejnovější verzi můžete stáhnout a nainstalovat skriptem `upgrade.sh`:
```bash
bash upgrade.sh
```
Skript stáhne nové soubory z repozitáře, provede odinstalování, znovu nainstaluje závislosti, obnoví aliasy v `~/.bashrc` a spustí Jarvika.

## API

Jarvik zpřístupňuje několik HTTP cest na portu 8010 (lze změnit proměnnou
`FLASK_PORT`):

* `POST /ask` – pošle dotaz Jarvikovi a uloží konverzaci do paměti.
* `POST /memory/add` – ručně přidá záznam `{ "user": "...", "jarvik": "..." }`.
* `GET /memory/search?q=dotaz` – vyhledá uložené záznamy, bez dotazu vrátí
  posledních pět.
* `GET /knowledge/search?q=dotaz` – prohledá lokální znalostní soubory.
* `GET /model` – vrátí název aktuálně používaného modelu.
* `POST /model` – restartuje Jarvika s modelem uvedeným v JSONu `{ "model": "nazev" }`.
